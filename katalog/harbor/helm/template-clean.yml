---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: "release-name-harbor-chartmuseum"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
type: Opaque
data:
  CACHE_REDIS_PASSWORD: ""
---
# Source: harbor/templates/clair/clair-secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: release-name-harbor-clair
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
type: Opaque
data:
  config.yaml: Y2xhaXI6CiAgZGF0YWJhc2U6CiAgICB0eXBlOiBwZ3NxbAogICAgb3B0aW9uczoKICAgICAgc291cmNlOiAicG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEByZWxlYXNlLW5hbWUtaGFyYm9yLWRhdGFiYXNlOjU0MzIvcG9zdGdyZXM/c3NsbW9kZT1kaXNhYmxlIgogICAgICAjIE51bWJlciBvZiBlbGVtZW50cyBrZXB0IGluIHRoZSBjYWNoZQogICAgICAjIFZhbHVlcyB1bmxpa2VseSB0byBjaGFuZ2UgKGUuZy4gbmFtZXNwYWNlcykgYXJlIGNhY2hlZCBpbiBvcmRlciB0byBzYXZlIHByZXZlbnQgbmVlZGxlc3Mgcm91bmR0cmlwcyB0byB0aGUgZGF0YWJhc2UuCiAgICAgIGNhY2hlc2l6ZTogMTYzODQKICBhcGk6CiAgICAjIEFQSSBzZXJ2ZXIgcG9ydAogICAgcG9ydDogNjA2MAogICAgaGVhbHRocG9ydDogNjA2MQogICAgIyBEZWFkbGluZSBiZWZvcmUgYW4gQVBJIHJlcXVlc3Qgd2lsbCByZXNwb25kIHdpdGggYSA1MDMKICAgIHRpbWVvdXQ6IDMwMHMKICB1cGRhdGVyOgogICAgaW50ZXJ2YWw6IDEyaAo=
  redis: cmVkaXM6Ly9yZWxlYXNlLW5hbWUtaGFyYm9yLXJlZGlzOjYzNzkvNA==
  database: cG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEByZWxlYXNlLW5hbWUtaGFyYm9yLWRhdGFiYXNlOjU0MzIvcG9zdGdyZXM/c3NsbW9kZT1kaXNhYmxl 
---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-harbor-core
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "a2lxNmFYTkdYSFdTUldjVg=="
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwekNDQXJ1Z0F3SUJBZ0lKQVBZL096TE1lVnEyTUEwR0NTcUdTSWIzRFFFQkN3VUFNQUF3SGhjTk1Ua3cKTkRFNE1ESXlOek0zV2hjTk1qa3dOREUxTURJeU56TTNXakFBTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBZzhBTUlJQ0NnS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQWFOUU1FNHdIUVlEVlIwT0JCWUVGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUI4R0ExVWRJd1FZTUJhQQpGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0lCQU1Bc0V0VmxFTE13ZHRjaWZIZU9UMGtPbWY1d285SW4vZUZTZ3NjQ3pCTURhUngyQjNxMzZBb1MKSWw3WFdBWnBldmFSN1c3eWVBUkthQXNoQkxoeWdVcUxEMHpXYktsU045SHByZDF3ZHBNMGZmeVBwTjVkeE9ZQQplcjA0eTEyR1JuQ2JNWXFpNGN2enRQNFRpblhxcTJ5SFNZaExiTzlxa0k1Z2JXVnhrUnVJY01Ldml4ZGRsbE5ZClEzb2JKYURESG1vdk0zK2cvRysxWUZndDRxRVMzOFhuSjdCclNzaEhubjVFSVFoMjg2eGZKcml5cksyaEhiTEoKcXowWXVGNkczRFhQZVdHZ1h2ajBIaXBjMGY4VURaa0tray9lR0VJNnZFa3l0eXZvZXBvWkkyWGJBZi9aTXk1bgpLd3VoRW40aGhrRk13V2FTV3AvaDBRZE1DYXhrNEJWU09xbU5WYUxTQjcrRmpzSWo0Q2FzRm90WWl5SjJncFJCCk5mOFFhUzRiejBUbjFlQmJDOGtzaitlM1pXZVgyYjV3Vk1qcWw5alR0MlgxSUNzOEtLZTN2RUJranFUMkFVaTIKNTJUdEt6bTczYVdyei9HUHkvUTJMQ29yM0ZoOUZHVlNCT0JCRFhHeTZNSnBOSEpuWVZIOUVFTkZHT2g4NW9sMQoycEFET0JCNXZBVS9rTEI1TEhQajJrdWUvRk1pSGFObnJTWUlHck1sQlNYMmpqOUVZYTF1dVVIK3BkNE1CajFGCjV1SDhPUmlhUTZodDIrV0hrbHhpYzFSajV5VFlRd1ZsSDcwQ0JPbitxVkVkbzYzeVF3ekFNSktGSXdsR1VRRVgKamlsamdjODZxNGNadFVURnJjd01pZGJrKzhRNitKYkRWZzdIVi8rcG5DK3dudjE5N2t3ZQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQVFLQ0FnRUFrOHE4czRQcnZZYnk3OVVWbFdKTktxY2V5a3dCa3hFMWZqcllPUldRMmhpQWlyeEdWNSs4bERULwprNnVqbTFFV3diNUswSHh4UktrYitQRWExSHFOTkhFNkp4TnBKS0s5ZXhEbFlBUSt4N2RGQnFWci8ybmF6bW80Ck1COE1MWWxtSXp0V1dvU1l3ZThvMm1FZzRxK2J4WXM1SW1kdTdBa2hFN2RKNjNobTIzZ0xNZmVNTGFsUnFvcHUKWEJQd0U1blhQNmFHdVVOSHRHMUs4dFFKRGxaWStMRWJBZU9mUmVOUWhUOU5kUnVrWVNXNTc5dmZLYmxKclN2egp1bGc4OXNWbTNjV0VLNXBCNnJqOXdKYks5NHZvS2Z0VnFiYnVCd1dqZDFhOXBpYktod1ZCZTJMMkZXaHBTWmM1CkYvY29DN25qVGFZVDZ0cjkxeTVWaGhKaElaUUNmL3Z2NFpsNVhoRkhzNVZUWk5iTS9PZnF5RlFMWVhWSk80OEsKRjd0bWF6QUVRUUJRd1ZacUg5QzlOUWR6UEhXbWMzOE9raHRjMXd6YXFuL3JnOSsxc2dBTUQ4aFdDdFFKVWU5NwpiOXltaDVBMFo0UVhLcHlGVDBiK3BYY0QxalJoYTA3VXRrWCsvekxKOUhwQVhjVW16a0crajVDWE5wbnhzSXE1CmZKRmVxM2hCajl3Nm40aCs1ME00VzBGc2U1WW9FVXNjM0IwZno4QmxRQmIrWUpMRkxOSDM0TUg4cDFsMFpEWUoKeWFlMHBzeGxCaWpnNE9QWitXQ0JhK2p0Rlc0TGlXZ0VjeHdnejh3K2hFT0FRcjJhMURjN3c4amQrWTRJSzhVbQpsVFZzNWRicDRtT21QTWxSdi9HTTdrRHVkRnFiTWczWUZ3WGczUWJxdVZxTFp6RXpqVmtDZ2dFQkFQSktaYkNXCllmTGVqa1MvZmtSeVYzVkliNTRtS3dRSG9NV3ViODh0UGdHdVh6anNKeWQ1UVRRNThQcFVqWHJMSG1uOGxTMisKdmlFOEdKeWxLd04xeU1sWnc0MCtrWmhwSFVwQ1d4LzJaS2pBcXZxQTlPT0tvMmZ2NkhkL3dPQW5VNEN0aW9DMQpwcmk3bEtGWVhvUDhEdFFWd0hZdkl6Q1JxRG5oYzRtd0pEcXpUQzl4ZHVJK3N2eHpsNHhIODJmeDBqclBpRlkrCi93T2RYanlmSVBqeWhIQzRqUFRXYmFpcndYUzlkQmpTbDEyOGFJUlQ1ODAveVhFL1NZQXVnZzA1akt0ZzV6UUEKU28xM01UZXpYUkhYZE8wZGkzdEVNSEdSRUVrRnBlVm5uUFF2Q0NlZEswRFYzNmlOd2lXYzhwd2RmTE1WbmVUdApES3daZWRDeCtvLzdldjBDZ2dFQkFPdTQ4REdFSkpKekh4VlI1bVkxSzJBbFp5WXRwVE9XZWhLMXpYNzRKdk0zCll4TjRuZCtaeDVuOXVTUG1tS3pxRjNUVSs0NFJWdGRKSzZlam9GRThkTURUTldhU0xXL1pEbU4xblQwbmp2T24KSVdKbjU5eW5PQ2hXV0taZ1haLzlVcUdSN1B0Nk94U2trZXg5Yy9mWUJzTVgveHVzZFhRaWdlb2dsMGlPWVZGVwpnWElpaUxSTEhwSEpzSy91TnhJaXpqMGhUWVluN3VEN1BSRU53RlJjQ1lmOEoxZVVGYmQ2RHVDVldlUUNLV2dmCk5kMnRTV29pMFZ5bGo0dVVYOEl3MHRqTE5NRDVDUkVKRWs0R1N2NEVEU212VWR2MUxpQktKQ0wybEVjZ29QZUMKb09EMmlDYzVLcWdubVFyYVJpbEZGazhSVlhBOVBXWkdZM0MwYjZUVm1tY0NnZ0VBTlpPMkFPS0FMbENBYlR0YgpGSStrUDA4UlA0dDVINThBTWpac2l3ZWFHbzBRaVduUERxK0ZkNk1JWXBLbjVtdGNBbHZVTVJWb3ZiaW9TSnROCmM2cHNCL3BOZjhKQ044Mm1xSEViN1dseXdNNDZBTUxiWkNXWUZMZThWQkJ2K2lFNEdkQkdQRWZ1NGhLNHZ5VG4KWVpBdlJ6NjRIR280QWRsenRiamc3NlYvbld0Z2dXMDV1TFhjcG01NUtKQVFodisyV1VMakJ3OVBIT0dEb1N3ZgpBbTIrVTU2N3JMaHQ3MHByc1FEajEwbGFKMlF1U0hTMVlYR2xmZUZjdzNlRlVwOVROK0pwdmRvQ29sMmxDSWdsCklIamdaajZPUldmQ3Zwb3hXN1JnQnVadWtxQ0QwUjYwSGRZdGF2eE4zanRpZXBzYXBBODNweE8wSmFwTWdaV1oKcnBVUmtRS0NBUUJPY0V2OUxpdTlUL0dYOXBqa2llelZJWjBoWnk4QjY2RFRlUXZZcEZyUnRDeVQzaDhxdU5GaQp2THRPNXYwSERSNmhFZjVqV0FHOXdldDA3VTM3dWxKZmwraTlLUWRWb0xUWkE5bys3MXJ5V1RzU3MrREQzQ0VqCnl4ZlV4VnhpVUxtZWFpQ2h6aHE2MDhoN0dZUHRoVVU2eGxGdHRBV2hqNW9MZnF6WXlBZzZPTDc2YStOeG0wMmcKMWF5bDNtOFU2ZUFYRjIza3BvVW0rSE5wcVZuR3VKbXpWb1VBNzVZS1orTnJlRWRoU0JiZlB3TjlzSnd0WlVpbAp1N0g0a0hjTTk1SXg4ZXlzQ2pLcUtJcWV6QmxJVGJEVG5qTnZMamNiSjVDKzBhNmx2SVhUMXZRUjUvZUdsYzlNCkJXRTM2MHBOa1YvTEQ4bU9mOUplcGkyUTQzb0RMOUVoQW9JQkFRRFRXSW1meTBLOWdHekEyclB5MTY5bVdZUUsKT2xjbkQzK2hRcTZ4NTFabjFlL3RleEZlVmxoSG40cnJuUmRDRk9BcDQ3dUZrSjJtNzJHQ1ZENzRFd1F1Y0s5eQpBRDVqb3JxZ1ZIcUNLWmRrSGpiMlY2ME16bTZnM3J0TDlXSlhGVkx2TkJiL1FHQjJ2Z0hWT08wenFpcUdaajRlCkV4N2wybS8vNVNFNERMdG43MEo5Q2dHMUh0WENTOGRXckdQTDFwekRuazhWWHRub1h6YjBMQ2hMVUZFZ1pSbWgKY1Y2QUZIRUsySDh3Qkh2aU55ZWhzUlFpRGtsMkFpV09jSk52a3pXNjhjazJuSmpSV3lQWUsxSkwzTkNLcEIzUQpPb2hyUDBmSGNXQVhNVzk3d0ZYWmhSZm5RZkR4eElPbGozTWNZVDBBbGFuWGQwRjROR2MyTnZtcGh4MDQKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  CLAIR_DB_PASSWORD: "Y2hhbmdlaXQ="

---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-harbor-database"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/ingress/secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: "release-name-harbor-ingress"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMekNDQWhlZ0F3SUJBZ0lRQVRRQS9KaVpHbDlKclVseXNLUjBOVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NakF3TlRBMk1EWXlOakEzV2hjTk1qRXdOVEEyTURZeQpOakEzV2pBZE1Sc3dHUVlEVlFRREV4SmpiM0psTG1oaGNtSnZjaTVrYjIxaGFXNHdnZ0VpTUEwR0NTcUdTSWIzCkRRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ2hBRFlxbzVhZUhVNmF4NkR4S3BRYlc4QUozK1BKVDkvWUh5SXoKNDc5WXg0R2NKMnloMUNSZFk2UHdJTVRqTVJaNWVRdFV4QVJUd251bHUzSzQ5WFhTc3BhZE1sczdxeTBmaGNVagpaNjlnQy9lT2VsK2RVZjJkcCthSk5oVWNxSHhaRThEdU4rVXQvVWNuRVdWT1VUbWdaNUgzNTF2dTVXcktzY2xHCllpOCswK3ppblFMVDFEWXFvQkx5R2xQUis0SWZSU2hvbEJmc3RBbXFnOUJwUGNlMVYxQk1EQ0dFSFdpK0FER0UKMXlRVlNmVCtBU29FOUdJM083dXdOd0pOY2xWUkVRNm9XTHc0SFRaY2RuVDI4WlBoQmdudDJjTUtQOHN6REhGSwpSMjRjNnRPWVZzTUhUL2pVc3dqbEJoR051d0VIb2NOV3htSzRaenF1ckxRNHlGRjFBZ01CQUFHamREQnlNQTRHCkExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWUQKVlIwVEFRSC9CQUl3QURBekJnTlZIUkVFTERBcWdoSmpiM0psTG1oaGNtSnZjaTVrYjIxaGFXNkNGRzV2ZEdGeQplUzVvWVhKaWIzSXVaRzl0WVdsdU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ2lpQW1XKzlNQ3Q4aFhyRmxsCmM0MFlaMVFxeU1sdjZESForM1pGYWlyS3FDWVpwSWpsdkJlSXFJaWVPN2RFeml2aGdiTmFsQ3lmNUZ3YnVhcnkKK0c3Vy9Fcll5NSs2TE12OUNVeEozanJGaC9iR0R3UTI5TXhIaWdQalBJMVptYWIwRzNRTEJZT0NpN1pjYmVMaApETU8zMUl2R2xNV3FMNUU0OUg3ZFNZVGtNcjg2UmROWW43Qy9JQndZVWVvRUZENzdudXJkeVlCZEx2Y3lZVU5RCkp0aDBDU3YyTVYzRDk3WnlWL3AwSGtqcnEwWjJyaUdGdjExdXdtTzdZR0ROb1dyWENEVFE2YWl2RDV3KzkrTEsKMGxUdXlzNlNHYm1BOG1IcFVoYnN2T1ZyWllqT3F4R2MzUDkxOFZGZHZQRXlQcVR3ZEVFR2xFUFlpWDZBd3FnZApubVB6Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBb1FBMktxT1duaDFPbXNlZzhTcVVHMXZBQ2QvanlVL2YyQjhpTStPL1dNZUJuQ2RzCm9kUWtYV09qOENERTR6RVdlWGtMVk1RRVU4SjdwYnR5dVBWMTByS1duVEpiTzZzdEg0WEZJMmV2WUF2M2pucGYKblZIOW5hZm1pVFlWSEtoOFdSUEE3amZsTGYxSEp4RmxUbEU1b0dlUjkrZGI3dVZxeXJISlJtSXZQdFBzNHAwQwowOVEyS3FBUzhocFQwZnVDSDBVb2FKUVg3TFFKcW9QUWFUM0h0VmRRVEF3aGhCMW92Z0F4aE5ja0ZVbjAvZ0VxCkJQUmlOenU3c0RjQ1RYSlZVUkVPcUZpOE9CMDJYSFowOXZHVDRRWUo3ZG5EQ2ovTE13eHhTa2R1SE9yVG1GYkQKQjAvNDFMTUk1UVlSamJzQkI2SERWc1ppdUdjNnJxeTBPTWhSZFFJREFRQUJBb0lCQVFDYTIxVStWZks5U25zYwpyUDdFZUt2VVZMKzF2NytkRmxLNzBkWllDcXMxZlUvUkhxcUNUVVpjL1VYbDVkNzZsM0NDamthejFZWkQra0JyCi9Jd3dFd2l0REZHS0NiRnZCd3B6MDNyMnZ2Z1ViZTVEQUxtTzNCb1Exam9McUJWT1oxQ1RiVWlZMlBKNjlhN0cKaVJqajU0U0NJSnhwMGdLL0diTktHdzc1djk2cGtpOHU1WkZKNk9xZlNmSUZXMW5XeGx6Z3B6NG1GOFJpcmFYYwpnUllqMVVCSnhMd2hqZUVSK1lOYUVmZ0twdWI0aUdzS2FScGZPN2FEcWkvc2t1UXBzVTNNRmZGeGJYVVN5ajdjCjFBSzVrSXFWaWxJYjlUbyttQVI2aXo5OU85bzA0bDdIUVcwekRkT0FhVGxSNzVhSjNIQ0owcGJ5a241cnkveXAKVHpSaWxKZ0JBb0dCQU1xR0VHYlNOakFYMEh5dWthQW1QaDZFSnNvMGpyZ1NPbzVLUENGKzJOZWhlRUhWLzVBRQo5aUdsNnVwTDFzQUlOZnk5SnAzUm1DQW1peU9aZkRLeGFTWDV3Y01hNDdTN1dpQlFPakZWOTNlVUhXbUlMTytSCkNNYm9mNEs5K056VGJUWUxxMFMxd2xaZWFCZTdwQVBZRlBlUEJjL1hlQmFKWjZnQmVPTEZvekNCQW9HQkFNdUQKVnFqNHdVWEVuM2NEQ1hvSzFkcmczM0RoRVY2QzdIV3FYQ3hlbkhwWEVralYwZEVnc2tNSTIwS0dnbHVqZlhLKwpOcDZPUmY3cGhXS0krOEVWbXVzR3lUQmszYnQ2T3d2aDQ5ekcvaGNETDhlYVF3Z2ZqU0kwR2ZubXNld2JyYWIvClRzeW1BMm9acFhkMXVyY1NIaE5TalNwVnFqUzdzelJ2bGp6aWgrYjFBb0dBQTdibHdoMEU1V2pxWi84RHFMNUsKMFdCM0hhcE5HODhweDhaUXlBUjlrYWJpZjhLZkIxTXYrSG9FanZ1SkdzaUx4UERyTG1YVHRuTStoZzZnbW9WcQpla25VWmZHdVQzaElOT09EemJmWDdCZUpXcEFtMHRZRUpUSEtkT2xyRVJISHBRQWR5Z3JUWDZZbm5wZlFjRW1jClNOWVVzelV1Zkt0VWZWNVppejg0dVFFQ2dZQm96NE5hRW9LM1E4UThycnU2dHNuY3ArTnJadjVqQmxweFh3T0oKZGxCd1VWZUJXMTFycnNNZjh2ZTVFejBmcE50K3RLZThrTmxMcDBpaXJwbTVuejdodStUeG40RHloTWpVSGNvVQpjZ2Q2SXBJQTRsbVRYV3g2S1FzWHdNL3hJWEFWaVhjenZtd1R3SkdQTEhxMHZnZnZPNXlvS09ZM3NsTmd0ZmRSCjgvaTU0UUtCZ1FEQTBGMnQ5WnA4Ui9BR1NPakVkZU5nWmF0eTFLVURWRFVTdmhFL3dtSlhqUXBoS21LS1Ryc2YKYUlRb21oNk1oZmx4M3FaY2NwY0FYdGFzNGl3NXE0a3YrQmNoM1FSMkRRMXF6NVJNVUM4ZXY0V1lHanJSUEdVcQo3T1lIU1BIcHhrdWEwQjkvbGthbGlmcjQ5R3FlOTNUSVNESFQxYlpiYjdBTE54UTc2V1ZLNHc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM5RENDQWR5Z0F3SUJBZ0lRUS9SSlFpVHk0WE9NWWVVSUNocFM5ekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NakF3TlRBMk1EWXlOakEzV2hjTk1qRXdOVEEyTURZeQpOakEzV2pBVU1SSXdFQVlEVlFRREV3bG9ZWEppYjNJdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQy9xVUJUMjJnaFBndE9xNE15allFYWtkZDRTVWlEVllqZEY0dkM5d0daQ3RhUzZNS1MKSnVsR1d0V2dRV3dTdDNUdFJRcjdnZ0RQSXBiMmVjQk9yMHdsOHlEQ2hFamxTVlF1Rm45L1lMWmVFM2N6Y0JHbQpXa01pL2Z5QjlxNVNtZ09rUEV5MGU3Ym5hbVhYZmRIOUZvaHNPMWJNaVpKeGdVbG5acVJ2MlJqRmttdWpKL3JpCktzYjZsUGlBSWlwK2h1a1RobEVyQVRxYTRUeHhlTno0WnhtT2gzUDdBL2dQd1dxaU5JNEFocVJ1R21jWXd5ZloKMk82NUNmZ3dMNy9rcTM1V0loWHMzQXg4c2VNQVZqN3BLaXJGMWxuTGFOZXVpVHFScWNabVJtbnFWeURobncwTgo2QTBHYkFvbWl3WFovUEZ5azh5WTdoMjBmM2RBWDdQeWE4ZUZBZ01CQUFHalFqQkFNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFOSUVUN0tLY2Q4NE5EWjBlS2NZbzNkbndLUHprSjJoMgpnbEx0WDdtaGpIYW8rcHdPaWhndXNHNXN5dDNiWkJGSWJ2M2doQXBranhzNUFxbUFjbjRuSm11OGlSWkUvcUhDCjUwUmFZSEFPSk1URmJycGRPaVpWUEVyNFJaa25KN3FodVhVbHNVQ3lWM2Q5SzJjdEdSZDN3VWJDREZLYjNyTk4KeEpyYXhPMGpIQ2tUOE02ZGI4dkQ0T3hySzRJK1VsWmd3OVBMNWJoenUrWksyd3J0RVQ0ZG5reXRXRGpQbHVQbAp2RlRISTN0Q1NxV24reks2SlhjS3RXeUl3NmRCczlKbWNrZDk2TG9xU3JEMVRuekZRR2tmSnhwaUdadUxtN0hXCml5L3lxTGsvVDk0SHZkSSsvRmxua2hJdHJpOUpHRWVUWHJoK0xuMXdJMEVXbVJBbk1PdlAvdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-harbor-jobservice"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secret: "UnJPc2hUdG1Ha3o3TTNWMw=="

---
# Source: harbor/templates/notary/notary-secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: release-name-harbor-notary-server
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
    component: notary
type: Opaque
data:
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBekNDQWV1Z0F3SUJBZ0lSQUtVT3hLbEZzN2lyRzdSU29jYmc4Tkl3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNREExTURZd05qSTJNRGRhRncweQpNVEExTURZd05qSTJNRGRhTUJzeEdUQVhCZ05WQkFNVEVHaGhjbUp2Y2kxdWIzUmhjbmt0WTJFd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEWitadGxHZWhmUllaWVczUzlId1dndk1EOEdMZysKWW1lWUJFcG1Ta3pGc0dUOEJyNmNjV2w2eXB1Z0EyRklnOTc5VW5MbkFRTnAyQ2ZzcmszdldYOFVYNzVkVFBGOQoyUXdwb3FsVzdUSm9ySDdyM2I2Q1MvL3hhM1BsY2JwR0tWTXN3RG9RREhQbGZIRHBkdXlMeTF5RHFGSzhJRmZZCk5SYXRuZVZnSWFSUzZnYnBCUUMwajVyWVRZNnBlSlYrbzVDV3d6aXhUbS9lYWJ0ZGhHWnFiSUNERGR5VUMvemEKNnNyUmg3Y2RycmdXQnhUQzRjOFFwb0pMT1NoeTdoM0ZYcm1mY0RnL0RjM01ZQ21oQytMOTY5WmJtYlphMnBCeQpFTW5UQnFtcXRVczJrWFNMTzNDZGV6RytKYy9hL3hrNVIxMFg0cklJakFhQjQwYXZIc2MzNjBUekFnTUJBQUdqClFqQkFNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQXQ1R2xKMjBuNUdUUApVYlZORExvN3h1Y25UKzhSZ0wwV3ZMcEJJM3QvajAvOEdCaHpoMG1FT1NRZnRsMFhsclVQaDQzaDRKdnZjT1FMCkRldndFK1gyY1V4KzFMU0lFNURGdWdIcS83bDhubHZ4bis1bFdsV1VxcjIvTHJueGhEamQ1OWhObmgvZ2NraUkKQVpWaHRJbmJWd2U3eHFDMzRLcFZJR0RCbzBGVkhnUzJialptTFlRR2J2NVdEN0prcWRtS00xSmhMdzI1UmloaQppWUEydmV2b0FYMlNHcmJIWi96dEMyQjhEdWt3SUw4RFd2SERLMk5JVlFHcytCV202UEFxcTFzVFBzOHVUQmxvCnJIMGFhTENhK01KdGxZMzNyd1hwUmdSVG5GSko3QUlyVWZNb21Ydms2b1M1bHl4NjdzY0FNbyt3eklCd2RlTngKY2lpYVAyRXl2dz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFVENDQWZtZ0F3SUJBZ0lSQVB1WDB3S0x1bVZmWGwrVHptUEU5aW93RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNREExTURZd05qSTJNRGRhRncweQpNVEExTURZd05qSTJNRGRhTUN3eEtqQW9CZ05WQkFNVElYSmxiR1ZoYzJVdGJtRnRaUzFvWVhKaWIzSXRibTkwCllYSjVMWE5wWjI1bGNqQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU0wcXB4RXgKdjIwOTBWMmQ4YmpoTCtrajZOd2FRYnV5ZkpvV2NtTWFVbU1GaVdlaHJURTZ5QmE5V1hsTi9lQ0FKbFptZ3pUMgpnNVdVa1VkZzFEYTVaS3IwUmZyTzk3alhRYnhIV1Bqd09MWTNPLzdTQ1JUWE55UnZkNE02b1JONUxqMG1WYW1BCm5VeC9WU1VpbzBPTThYL1pTZnpTV1hqcWRhaGJOamN2cHZOM1g4cG5ud3VoK0ZGM2x2V0YxaUNiNmMwR21ITUwKMGs5bEM0ajd6U1RIcjlXa1p2UFM5ZmV6YnpuczEvbGVlK1pDK201cklwL01qMXlZRkR0cTY5Nm1wRDlZcSs4YwpkWTR4V0wzS28wNGMrNVl1V3orOUlBelpjNU9xaFlBYnNOSmprZEVob28vdUpYemFtMGppNWFSQnByRUlxVjFjCjJJTGErYnQ3WmVLY0d6Y0NBd0VBQWFNL01EMHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUcKQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElCQVFDZ2JkeFBXdWp2V3psaW0xV25meEtuOW0xQWFYdXZNN2s5S2pMekdPaTdOYXQ5S0FHWmxZOHY0OFpUCmlBeWVuTUYyVWgxRndtZDcyNjVVL01TKy9VcHo4WWhyeXcxNUpEKzV6bnpzMzZRZG8wMmRwVUdWWnFtUnVpRGMKeGFVQnA0R04zNng0MWx2TXFwSG5SV1RQNE82VUNIVHBVb041eUg3MmZiQ0ZyU2pFNlR6ZlFPKytvTEhzRnBrRwpMZWxsWXdGNjFHRWhPcnd5a2NvZWF5L1l3MWVPVzc3dHJqd2pqQWdUUFJFU21mS2lNdUR0dWZ0VkgyaG1HUHRoClYyVEJHdTNQdDJTRzdFQjQwUjNYSmdYMTlFeUx5bnlNbmVZZ280ZU1rT0hmbkVHeWZhZmVKdmlId2kzZGxkYlkKK1dnM0VWeHFsWGdoWk04VGFLNjdqNDdFNEhzYwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBelNxbkVURy9iVDNSWFozeHVPRXY2U1BvM0JwQnU3SjhtaFp5WXhwU1l3V0paNkd0Ck1UcklGcjFaZVUzOTRJQW1WbWFETlBhRGxaU1JSMkRVTnJsa3F2UkYrczczdU5kQnZFZFkrUEE0dGpjNy90SUoKRk5jM0pHOTNnenFoRTNrdVBTWlZxWUNkVEg5VkpTS2pRNHp4ZjlsSi9OSlplT3AxcUZzMk55K204M2RmeW1lZgpDNkg0VVhlVzlZWFdJSnZwelFhWWN3dlNUMlVMaVB2TkpNZXYxYVJtODlMMTk3TnZPZXpYK1Y1NzVrTDZibXNpCm44eVBYSmdVTzJycjNxYWtQMWlyN3h4MWpqRll2Y3FqVGh6N2xpNWJQNzBnRE5sems2cUZnQnV3MG1PUjBTR2kKais0bGZOcWJTT0xscEVHbXNRaXBYVnpZZ3RyNXUzdGw0cHdiTndJREFRQUJBb0lCQVFDYzlNbDA3UU1PZHFGcQpKai9iZVdMbTBCTC85NUpjSHJNV1NwL2QwekErRXVsSWY3WjRtQWlrNU56RFlYZ2N2TTBYZ2p0VVZGYmNJeGwxCmFzMU94RXdRUU9vY2N5T3VvL2JsTEF3VC9lclU4N0tSUW11eUp1ZEhsNEx0d1Blalp5eUptWDhsT29DY0dqbXcKUEN4OHJDSEE5aUdWS2ZOSy9zdGVMZEZ2TEtSalVvcDlpN0R0L3hEZG96NkFzOVRzeHRYSEh2cmZGMk03R2lRUQo5OS9zbmxEclZxb0NWU21BRHhDeXJRZjJvMnp6cG5Ma3NualJjYkxKdjhOY3dER3R6SEJsL3JMY1JrU3FzVVVSCmpBQ29XZGEzQzBmVjdIbEtsV013cWZpOCtuR1IweTZvb202TDVSYUgwUG5wTUJBUnVlb3lMSXExQXRLVERRNUwKTHNscm1tUHBBb0dCQU0vSnNLc2xxTFFTQWlUTkgrWVZIRnBROVBaa3VoakFCcVl5ZWtRc2hJT0RXU0RKNERrWQpJcitISDFzRmFFTkVZSWxzbFIybHhZZitZWHNrTVFrOWFoeXYzUlVibE9valordHhJQW56Q1dVOGlzYjRicWFTCkQwdVJETndJZ1I3WjJiWkRKeE1BQkUrWUpKTTNFeElqbkpML21qUkdPZ2p5YmZkQ21adGRpa2dMQW9HQkFQekYKUTdQYThkcDJqVk4xODZCUkN4bUwxN05GNVphUG1nbk5TdUdBRjFzUVNuQ2xXQ0R3azFVZE1xK1o1bWVuT1M5RgppNEU3V2VILy9VQjVLckFHTW14NTJteC9Zd3JDM3ZTQjdwTUZ3MFQ1N1VaZGFmckEySVA2dWV2ejZ6dHRmMzY5CkRrSkVCbENPT1E3bjJ4cWlxbytwVkY4VFZ1b2xqY2M4ZFFKMFF2a0ZBb0dBT2c4WkZqbEhra2tWNEVLUWp6R0cKNHBXTVhPeDRNMEkwbVd1eFRpdENPNTBQNG1HR0RXMzVCNXN4MzdUN0ZSQ2VDTWdXUWxwM2Z6Qk0vS040TUNUQQo2Wk1hS3pPeHdGcDBSdzBzN3ByQ0hVOTFWM05ETjdmSUhrMUJVcG50dWprVTVDQ1BZbmUydkthK1VZUXFCLzk3CldIZWpGc2dvbnlkZUlxQ3hXd0FnQzFFQ2dZRUF3Z2FoKzNMNjV4ak5UdDFoanhQbWswdDIzVk92OGl4MHIwVjQKVHpSRnVVNzk5UTNXWWlLSTFYSytMM0RSSFl1Tko2NFljYkNmUkExOTFubXJ2TVprK2tObTJKWEg3c0M2NTdDOAo4dm9mYzlqc3UzQ0ZJMGZZYXlhUWhJQU5kdWFNVVRySnNUQUtNTmViRU1nRXRhTmJqVDhMVnBlL3hhZmg5cWQvCm9jeWdoQWtDZ1lBY0lDV2FKOUVzZGl6YUlVSjdmUDhTM3YvakYvalhRN2J4ODQ3bkxVbzhWU24zWEl2SmdqMUIKblMwbmxDVVU5ZCt5QnRZSHp5MzlpdThnSDhRMXIwYTkwamFYaDFmYUJBY1l3cDZGZDFHWEk5WU9nVXROQ1B4UQpaK0lINGtxN0tHZURHSDF4d3c4QWQxaTN4bE5GN0VQSWpsSnpSSXhnSzRNVi9XVVJFQTBhSVE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  server.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiaHR0cF9hZGRyIjogIjo0NDQzIgogIH0sCiAgInRydXN0X3NlcnZpY2UiOiB7CiAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgImhvc3RuYW1lIjogInJlbGVhc2UtbmFtZS1oYXJib3Itbm90YXJ5LXNpZ25lciIsCiAgICAicG9ydCI6ICI3ODk5IiwKICAgICJ0bHNfY2FfZmlsZSI6ICIvZXRjL3NzbC9ub3RhcnkvY2EuY3J0IiwKICAgICJrZXlfYWxnb3JpdGhtIjogImVjZHNhIgogIH0sCiAgImxvZ2dpbmciOiB7CiAgICAibGV2ZWwiOiAiaW5mbyIKICB9LAogICJzdG9yYWdlIjogewogICAgImJhY2tlbmQiOiAicG9zdGdyZXMiLAogICAgImRiX3VybCI6ICJwb3N0Z3JlczovL3Bvc3RncmVzOmNoYW5nZWl0QHJlbGVhc2UtbmFtZS1oYXJib3ItZGF0YWJhc2U6NTQzMi9ub3RhcnlzZXJ2ZXI/c3NsbW9kZT1kaXNhYmxlIgogIH0sCiAgImF1dGgiOiB7CiAgICAidHlwZSI6ICJ0b2tlbiIsCiAgICAib3B0aW9ucyI6IHsKICAgICAgInJlYWxtIjogImh0dHBzOi8vY29yZS5teWhhcmJvci4zNC4yNDQuMTE0LjQyLm5pcC5pby9zZXJ2aWNlL3Rva2VuIiwKICAgICAgInNlcnZpY2UiOiAiaGFyYm9yLW5vdGFyeSIsCiAgICAgICJpc3N1ZXIiOiAiaGFyYm9yLXRva2VuLWlzc3VlciIsCiAgICAgICJyb290Y2VydGJ1bmRsZSI6ICIvcm9vdC5jcnQiCiAgICB9CiAgfQp9
  signer.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiZ3JwY19hZGRyIjogIjo3ODk5IiwKICAgICJ0bHNfY2VydF9maWxlIjogIi9ldGMvc3NsL25vdGFyeS90bHMuY3J0IiwKICAgICJ0bHNfa2V5X2ZpbGUiOiAiL2V0Yy9zc2wvbm90YXJ5L3Rscy5rZXkiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6Y2hhbmdlaXRAcmVsZWFzZS1uYW1lLWhhcmJvci1kYXRhYmFzZTo1NDMyL25vdGFyeXNpZ25lcj9zc2xtb2RlPWRpc2FibGUiLAogICAgImRlZmF1bHRfYWxpYXMiOiAiZGVmYXVsdGFsaWFzIgogIH0KfQ==

---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "release-name-harbor-registry"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "dVFWaG16ZnJHaG1wTW1oMQ=="
  REGISTRY_REDIS_PASSWORD: ""

---
# Source: harbor/templates/chartmuseum/chartmuseum-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-harbor-chartmuseum"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
data:
  PORT: "9999"
  CACHE: "redis"
  CACHE_REDIS_ADDR: "release-name-harbor-redis:6379"
  CACHE_REDIS_DB: "3"
  BASIC_AUTH_USER: "chart_controller"
  DEPTH: "1"
  DEBUG: "false"
  LOG_JSON: "true"
  DISABLE_METRICS: "false"
  DISABLE_API: "false"
  DISABLE_STATEFILES: "false"
  ALLOW_OVERWRITE: "true"
  #CHART_URL: https://core.myharbor.34.244.114.42.nip.io/chartrepo
  AUTH_ANONYMOUS_GET: "false"
  TLS_CERT: ""
  TLS_KEY: ""
  CONTEXT_PATH: ""
  INDEX_LIMIT: "0"
  MAX_STORAGE_OBJECTS: "0"
  MAX_UPLOAD_SIZE: "20971520"
  CHART_POST_FORM_FIELD_NAME: "chart"
  PROV_POST_FORM_FIELD_NAME: "prov"
  STORAGE: "local"
  STORAGE_LOCAL_ROOTDIR: "/chart_storage"

---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-harbor-core
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = dev
    enablegzip = true

    [dev]
    httpport = 8080
    EnableXSRF = true
    XSRFKey = sl5mi1rU1tj4gXwXyiiHz7H6vF3m3vsqtxwrFRae
    XSRFExpire = 3600
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "release-name-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "50"
  POSTGRESQL_MAX_OPEN_CONNS: "100"
  EXT_ENDPOINT: "https://core.myharbor.34.244.114.42.nip.io"
  CORE_URL: "http://release-name-harbor-core"
  JOBSERVICE_URL: "http://release-name-harbor-jobservice"
  REGISTRY_URL: "http://release-name-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://release-name-harbor-core/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://release-name-harbor-notary-server:4443"
  CFG_EXPIRATION: "5"
  ADMIRAL_URL: "NA"
  WITH_CLAIR: "true"
  CLAIR_DB_HOST: "release-name-harbor-database"
  CLAIR_DB_PORT: "5432"
  CLAIR_DB_USERNAME: "postgres"
  CLAIR_DB: "postgres"
  CLAIR_DB_SSLMODE: "disable"
  CLAIR_URL: "http://release-name-harbor-clair:6060"
  CLAIR_ADAPTER_URL: "http://release-name-harbor-clair:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "true"
  CHART_REPOSITORY_URL: "http://release-name-harbor-chartmuseum"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  SYNC_REGISTRY: "false"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL: "release-name-harbor-redis:6379,100,"
  _REDIS_URL_REG: "redis://release-name-harbor-redis:6379/2"
  PORTAL_URL: "http://release-name-harbor-portal"
  REGISTRYCTL_URL: "http://release-name-harbor-registry:8080"
  CLAIR_HEALTH_CHECK_SERVER_URL: "http://release-name-harbor-clair:6061"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "release-name-harbor-core,release-name-harbor-jobservice,release-name-harbor-database,release-name-harbor-chartmuseum,release-name-harbor-clair,release-name-harbor-notary-server,release-name-harbor-notary-signer,release-name-harbor-registry,release-name-harbor-portal,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-harbor-jobservice"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "release-name-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-harbor-registry"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: true
    redis:
      addr: "release-name-harbor-redis:6379"
      db: 2
    http:
      relativeurls: true
      addr: :5000
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      token:
        issuer: harbor-token-issuer
        realm: "https://core.myharbor.34.244.114.42.nip.io/service/token"
        rootcertbundle: /etc/registry/root.crt
        service: harbor-registry
    validation:
      disabled: true
    notifications:
      endpoints:
        - name: harbor
          disabled: false
          url: http://release-name-harbor-core/service/notifications
          timeout: 3000ms
          threshold: 5
          backoff: 1s
          ignoredmediatypes:
            - application/vnd.docker.image.rootfs.diff.tar.gzip
            - application/vnd.docker.image.rootfs.foreign.diff.tar.gzip
            - application/vnd.oci.image.layer.v1.tar
            - application/vnd.oci.image.layer.v1.tar+gzip
            - application/vnd.oci.image.layer.v1.tar+zstd
            - application/vnd.oci.image.layer.nondistributable.v1.tar
            - application/vnd.oci.image.layer.nondistributable.v1.tar+gzip
            - application/vnd.oci.image.layer.nondistributable.v1.tar+zstd
            - application/octet-stream
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info

---
# Source: harbor/templates/chartmuseum/chartmuseum-pvc.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-harbor-chartmuseum
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/registry/registry-pvc.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: "release-name-harbor-chartmuseum"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 9999
  selector:
    release: release-name
    app: "harbor"
    component: chartmuseum
---
# Source: harbor/templates/clair/clair-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: "release-name-harbor-clair"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: adapter
      port: 8080
  selector:
    release: release-name
    app: "harbor"
    component: clair


---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-harbor-core
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: release-name
    app: "harbor"
    component: core

---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-harbor-database"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: release-name
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-harbor-jobservice"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: release-name
    app: "harbor"
    component: jobservice

---
# Source: harbor/templates/notary/notary-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: release-name-harbor-notary-server
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 4443
  selector:
    release: release-name
    app: "harbor"
    component: notary-server

---
apiVersion: v1
kind: Service
metadata:
  name: release-name-harbor-notary-signer
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 7899
  selector:
    release: release-name
    app: "harbor"
    component: notary-signer

---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-harbor-portal"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: release-name
    app: "harbor"
    component: portal

---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-harbor-redis
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: release-name
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-harbor-registry"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    release: release-name
    app: "harbor"
    component: registry
---
# Source: harbor/templates/chartmuseum/chartmuseum-dpl.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: "release-name-harbor-chartmuseum"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: chartmuseum
  template:
    metadata:
      labels:
        heritage: Tiller
        release: release-name
        chart: harbor
        app: "harbor"
        component: chartmuseum
      annotations:
        checksum/configmap: e128fd50289f447360cb0518eb4f14b5a206fa9e18374d2a793f840c710cfab6
        checksum/secret: f854a2a0fc0067507c97ae856d61bbe3e74c8b8498778f18d856126adef4a11b
        checksum/secret-core: 327982745b9e566a6c9a97c0c75f3e3ad4f22c56fe5b1082e76bfc8272b3a579
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: chartmuseum
        image: goharbor/chartmuseum-photon:v0.9.0-v1.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 9999
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 9999
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "release-name-harbor-chartmuseum"
        - secretRef:
            name: "release-name-harbor-chartmuseum"
        env:
          - name: BASIC_AUTH_PASS
            valueFrom:
              secretKeyRef:
                name: release-name-harbor-core
                key: secret
        ports:
        - containerPort: 9999
        volumeMounts:
        - name: chartmuseum-data
          mountPath: /chart_storage
          subPath: 
      volumes:
      - name: chartmuseum-data
        persistentVolumeClaim:
          claimName: release-name-harbor-chartmuseum

---
# Source: harbor/templates/clair/clair-dpl.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-harbor-clair
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
    component: clair
spec:
  replicas: 1
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: clair
  template:
    metadata:
      labels:
        heritage: Tiller
        release: release-name
        chart: harbor
        app: "harbor"
        component: clair
      annotations:
        checksum/secret: d06e1c14b755fcce7e961329a8434e112ca378fe1d58ccda5f212147a7191389
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: clair
        image: goharbor/clair-photon:v2.1.1-v1.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        args: ["-log-level", "info"]
        env:
        - name: HTTP_PROXY
          value: ""
        - name: HTTPS_PROXY
          value: ""
        - name: NO_PROXY
          value: "release-name-harbor-core,release-name-harbor-jobservice,release-name-harbor-database,release-name-harbor-chartmuseum,release-name-harbor-clair,release-name-harbor-notary-server,release-name-harbor-notary-signer,release-name-harbor-registry,release-name-harbor-portal,127.0.0.1,localhost,.local,.internal"
        ports:
        - containerPort: 6060
        volumeMounts:
        - name: config
          mountPath: /etc/clair/config.yaml
          subPath: config.yaml
      - name: adapter
        image: goharbor/clair-adapter-photon:v1.0.1-v1.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /probe/healthy
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /probe/ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        env:
        - name: SCANNER_CLAIR_URL
          # To avoid a pod cannot reach itself via service IP when the clusters disable hairpin
          value: "http://127.0.0.1:6060"
        - name: SCANNER_STORE_REDIS_URL
          valueFrom:
              secretKeyRef:
                name: release-name-harbor-clair
                key: redis
        - name: SCANNER_CLAIR_DATABASE_URL
          valueFrom:
              secretKeyRef:
                name: release-name-harbor-clair
                key: database
        - name: SCANNER_LOG_LEVEL
          value: "info"
        ports:
        - containerPort: 8080
      volumes:
      - name: config
        secret:
          secretName: "release-name-harbor-clair"


---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-harbor-core
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: release-name
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: a2afdda7ce166f21437b94973bd690a50db0ea3e92dbdaffce53a2994100f7bd
        checksum/secret: 02c5f631b88950bf34aff7013b5990480506d3bbebee3c56ce4d74bf9b1ced21
        checksum/secret-jobservice: 56df748129c61d6191df3f16ce9077e765bb637929833e1b942e566b37014c8c
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: core
        image: goharbor/harbor-core:v1.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "release-name-harbor-core"
        - secretRef:
            name: "release-name-harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: release-name-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "release-name-harbor-jobservice"
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: release-name-harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: release-name-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: release-name-harbor-core
      - name: ca-download
        secret:
          secretName: "release-name-harbor-ingress"
      - name: psc
        emptyDir: {}

---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "release-name-harbor-jobservice"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Tiller
        release: release-name
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: 87602c56ef45fbcc0d4afe2780df4a749d472c170512f3b4a4a5a046fd24bd07
        checksum/secret: 3d83714f4e309cf76eaa4aa1552ec5cb24640702eb560edd4be5a43020d98d1a
        checksum/secret-core: 3c2b5b520a47b162bad506dedad0a481459f8ec3c392fd91615f30000fca1588
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v1.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: release-name-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "release-name-harbor-jobservice"
                key: secret
          - name: CORE_URL
            value: "http://release-name-harbor-core"
          - name: REGISTRY_CONTROLLER_URL
            value: "http://release-name-harbor-registry:8080"
          - name: LOG_LEVEL
            value: debug
          - name: HTTP_PROXY
            value: ""
          - name: HTTPS_PROXY
            value: ""
          - name: NO_PROXY
            value: "release-name-harbor-core,release-name-harbor-jobservice,release-name-harbor-database,release-name-harbor-chartmuseum,release-name-harbor-clair,release-name-harbor-notary-server,release-name-harbor-notary-signer,release-name-harbor-registry,release-name-harbor-portal,127.0.0.1,localhost,.local,.internal"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "release-name-harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: release-name-harbor-jobservice

---
# Source: harbor/templates/notary/notary-server.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-harbor-notary-server
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Tiller
        release: release-name
        chart: harbor
        app: "harbor"
        component: notary-server
      annotations:
        checksum/secret: 51ff0e05e62e872525a8ec1f68e1f375b55577dafcefe0e85d8dcf35b6d12984
        checksum/secret-core: c6c2517528ecaa14ce4f76a01442176426d2d7f067d24fc083ad38b735d3bb3e
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: notary-server
        image: goharbor/notary-server-photon:v0.6.1-v1.10.1
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/server/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@release-name-harbor-database:5432/notaryserver?sslmode=disable
        volumeMounts:
        - name: config
          mountPath: /etc/notary/server-config.postgres.json
          subPath: server.json
        - name: token-service-certificate
          mountPath: /root.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/ca.crt
          subPath: ca.crt
      volumes:
      - name: config
        secret:
          secretName: "release-name-harbor-notary-server"
      - name: token-service-certificate
        secret:
          secretName: release-name-harbor-core
      - name: signer-certificate
        secret:
          secretName: release-name-harbor-notary-server


---
# Source: harbor/templates/notary/notary-signer.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-harbor-notary-signer
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Tiller
        release: release-name
        chart: harbor
        app: "harbor"
        component: notary-signer
      annotations:
        checksum/secret: f1808343ba0565f4ef82713562b0a5949a68c296270dd180b0202ecdc92486fd
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: notary-signer
        image: goharbor/notary-signer-photon:v0.6.1-v1.10.1
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/signer/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@release-name-harbor-database:5432/notarysigner?sslmode=disable
        - name: NOTARY_SIGNER_DEFAULTALIAS
          value: defaultalias
        volumeMounts:
        - name: config
          mountPath: /etc/notary/signer-config.postgres.json
          subPath: signer.json
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.key
          subPath: tls.key
      volumes:
      - name: config
        secret:
          secretName: "release-name-harbor-notary-server"
      - name: signer-certificate
        secret:
          secretName: release-name-harbor-notary-server


---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "release-name-harbor-portal"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: release-name
        app: "harbor"
        component: portal
      annotations:
    spec:
      containers:
      - name: portal
        image: goharbor/harbor-portal:v1.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080

---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "release-name-harbor-registry"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Tiller
        release: release-name
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: 2ffa8fd0d1fc6840036a63645043935caf90961441eebbfbb0feb4fd290a5b5b
        checksum/secret: 1bd21f8c829328b1f00090feb4512aee3f4800e2ec82b2fa39ceab1b261df03e
        checksum/secret-jobservice: 93db6448cddfa321d081ebf9926208286b3d5930aedea197f85b6d6d5286e379
        checksum/secret-core: f6a1d53b01c9b3936ac49f205928913e3cbc1c05328c708ee70978c7fe4639ea
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "release-name-harbor-registry"
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-root-certificate
          mountPath: /etc/registry/root.crt
          subPath: tls.crt
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v1.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "release-name-harbor-registry"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: release-name-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: release-name-harbor-jobservice
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-root-certificate
        secret:
          secretName: release-name-harbor-core
      - name: registry-config
        configMap:
          name: "release-name-harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: release-name-harbor-registry

---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "release-name-harbor-database"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "release-name-harbor-database"
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Tiller
        release: release-name
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 4af16722d680eab69b7513431158cc43c015ebf3e6f6e0cfff8bcd3191c12ed0
    spec:
      initContainers:
      - name: "change-permission-of-directory"
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chown -R 999:999 /var/lib/postgresql/data"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
      - name: "remove-lost-found"
        image: goharbor/harbor-db:v1.10.1
        imagePullPolicy: IfNotPresent
        command: ["rm", "-Rf", "/var/lib/postgresql/data/lost+found"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
      containers:
      - name: database
        image: goharbor/harbor-db:v1.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
          - secretRef:
              name: "release-name-harbor-database"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Tiller
        release: release-name
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-harbor-redis
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: release-name-harbor-redis
  selector:
    matchLabels:
      release: release-name
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Tiller
        release: release-name
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: redis
        image: goharbor/redis-photon:v1.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Tiller
        release: release-name
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/ingress/ingress.yaml

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "release-name-harbor-ingress"
  labels:
    heritage: Tiller
    release: release-name
    chart: harbor
    app: "harbor"
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    
spec:
  tls:
  - secretName: "release-name-harbor-ingress"
    hosts:
    - core.harbor.domain
  - secretName: "release-name-harbor-ingress"
    hosts:
    - notary.harbor.domain
  rules:
  - http:
      paths:
      - path: /
        backend:
          serviceName: release-name-harbor-portal
          servicePort: 80
      - path: /api/
        backend:
          serviceName: release-name-harbor-core
          servicePort: 80
      - path: /service/
        backend:
          serviceName: release-name-harbor-core
          servicePort: 80
      - path: /v2/
        backend:
          serviceName: release-name-harbor-core
          servicePort: 80
      - path: /chartrepo/
        backend:
          serviceName: release-name-harbor-core
          servicePort: 80
      - path: /c/
        backend:
          serviceName: release-name-harbor-core
          servicePort: 80
    host: core.harbor.domain
  - http:
      paths:
      - path: /
        backend:
          serviceName: release-name-harbor-notary-server
          servicePort: 4443
    host: notary.harbor.domain
---
# Source: harbor/templates/nginx/configmap-http.yaml

    
---
# Source: harbor/templates/nginx/configmap-https.yaml

    
---
# Source: harbor/templates/nginx/deployment.yaml

---
# Source: harbor/templates/nginx/secret.yaml

---
# Source: harbor/templates/nginx/service.yaml


