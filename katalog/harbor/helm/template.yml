---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  CACHE_REDIS_PASSWORD: ""
  AWS_SECRET_ACCESS_KEY: "YXdzc2VjcmV0a2V5"
---
# Source: harbor/templates/clair/clair-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-harbor-clair
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  config.yaml: Y2xhaXI6CiAgZGF0YWJhc2U6CiAgICB0eXBlOiBwZ3NxbAogICAgb3B0aW9uczoKICAgICAgc291cmNlOiAicG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBoYXJib3ItaGFyYm9yLWRhdGFiYXNlOjU0MzIvcG9zdGdyZXM/c3NsbW9kZT1kaXNhYmxlIgogICAgICAjIE51bWJlciBvZiBlbGVtZW50cyBrZXB0IGluIHRoZSBjYWNoZQogICAgICAjIFZhbHVlcyB1bmxpa2VseSB0byBjaGFuZ2UgKGUuZy4gbmFtZXNwYWNlcykgYXJlIGNhY2hlZCBpbiBvcmRlciB0byBzYXZlIHByZXZlbnQgbmVlZGxlc3Mgcm91bmR0cmlwcyB0byB0aGUgZGF0YWJhc2UuCiAgICAgIGNhY2hlc2l6ZTogMTYzODQKICBhcGk6CiAgICAjIEFQSSBzZXJ2ZXIgcG9ydAogICAgcG9ydDogNjA2MAogICAgaGVhbHRocG9ydDogNjA2MQogICAgIyBEZWFkbGluZSBiZWZvcmUgYW4gQVBJIHJlcXVlc3Qgd2lsbCByZXNwb25kIHdpdGggYSA1MDMKICAgIHRpbWVvdXQ6IDMwMHMKICB1cGRhdGVyOgogICAgaW50ZXJ2YWw6IDEyaAo=
  redis: cmVkaXM6Ly9oYXJib3ItaGFyYm9yLXJlZGlzOjYzNzkvNA==
  database: cG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBoYXJib3ItaGFyYm9yLWRhdGFiYXNlOjU0MzIvcG9zdGdyZXM/c3NsbW9kZT1kaXNhYmxl
---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "UkZIZVB1b2FHS2l2ek45YQ=="
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwekNDQXJ1Z0F3SUJBZ0lKQVBZL096TE1lVnEyTUEwR0NTcUdTSWIzRFFFQkN3VUFNQUF3SGhjTk1Ua3cKTkRFNE1ESXlOek0zV2hjTk1qa3dOREUxTURJeU56TTNXakFBTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBZzhBTUlJQ0NnS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQWFOUU1FNHdIUVlEVlIwT0JCWUVGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUI4R0ExVWRJd1FZTUJhQQpGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0lCQU1Bc0V0VmxFTE13ZHRjaWZIZU9UMGtPbWY1d285SW4vZUZTZ3NjQ3pCTURhUngyQjNxMzZBb1MKSWw3WFdBWnBldmFSN1c3eWVBUkthQXNoQkxoeWdVcUxEMHpXYktsU045SHByZDF3ZHBNMGZmeVBwTjVkeE9ZQQplcjA0eTEyR1JuQ2JNWXFpNGN2enRQNFRpblhxcTJ5SFNZaExiTzlxa0k1Z2JXVnhrUnVJY01Ldml4ZGRsbE5ZClEzb2JKYURESG1vdk0zK2cvRysxWUZndDRxRVMzOFhuSjdCclNzaEhubjVFSVFoMjg2eGZKcml5cksyaEhiTEoKcXowWXVGNkczRFhQZVdHZ1h2ajBIaXBjMGY4VURaa0tray9lR0VJNnZFa3l0eXZvZXBvWkkyWGJBZi9aTXk1bgpLd3VoRW40aGhrRk13V2FTV3AvaDBRZE1DYXhrNEJWU09xbU5WYUxTQjcrRmpzSWo0Q2FzRm90WWl5SjJncFJCCk5mOFFhUzRiejBUbjFlQmJDOGtzaitlM1pXZVgyYjV3Vk1qcWw5alR0MlgxSUNzOEtLZTN2RUJranFUMkFVaTIKNTJUdEt6bTczYVdyei9HUHkvUTJMQ29yM0ZoOUZHVlNCT0JCRFhHeTZNSnBOSEpuWVZIOUVFTkZHT2g4NW9sMQoycEFET0JCNXZBVS9rTEI1TEhQajJrdWUvRk1pSGFObnJTWUlHck1sQlNYMmpqOUVZYTF1dVVIK3BkNE1CajFGCjV1SDhPUmlhUTZodDIrV0hrbHhpYzFSajV5VFlRd1ZsSDcwQ0JPbitxVkVkbzYzeVF3ekFNSktGSXdsR1VRRVgKamlsamdjODZxNGNadFVURnJjd01pZGJrKzhRNitKYkRWZzdIVi8rcG5DK3dudjE5N2t3ZQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQVFLQ0FnRUFrOHE4czRQcnZZYnk3OVVWbFdKTktxY2V5a3dCa3hFMWZqcllPUldRMmhpQWlyeEdWNSs4bERULwprNnVqbTFFV3diNUswSHh4UktrYitQRWExSHFOTkhFNkp4TnBKS0s5ZXhEbFlBUSt4N2RGQnFWci8ybmF6bW80Ck1COE1MWWxtSXp0V1dvU1l3ZThvMm1FZzRxK2J4WXM1SW1kdTdBa2hFN2RKNjNobTIzZ0xNZmVNTGFsUnFvcHUKWEJQd0U1blhQNmFHdVVOSHRHMUs4dFFKRGxaWStMRWJBZU9mUmVOUWhUOU5kUnVrWVNXNTc5dmZLYmxKclN2egp1bGc4OXNWbTNjV0VLNXBCNnJqOXdKYks5NHZvS2Z0VnFiYnVCd1dqZDFhOXBpYktod1ZCZTJMMkZXaHBTWmM1CkYvY29DN25qVGFZVDZ0cjkxeTVWaGhKaElaUUNmL3Z2NFpsNVhoRkhzNVZUWk5iTS9PZnF5RlFMWVhWSk80OEsKRjd0bWF6QUVRUUJRd1ZacUg5QzlOUWR6UEhXbWMzOE9raHRjMXd6YXFuL3JnOSsxc2dBTUQ4aFdDdFFKVWU5NwpiOXltaDVBMFo0UVhLcHlGVDBiK3BYY0QxalJoYTA3VXRrWCsvekxKOUhwQVhjVW16a0crajVDWE5wbnhzSXE1CmZKRmVxM2hCajl3Nm40aCs1ME00VzBGc2U1WW9FVXNjM0IwZno4QmxRQmIrWUpMRkxOSDM0TUg4cDFsMFpEWUoKeWFlMHBzeGxCaWpnNE9QWitXQ0JhK2p0Rlc0TGlXZ0VjeHdnejh3K2hFT0FRcjJhMURjN3c4amQrWTRJSzhVbQpsVFZzNWRicDRtT21QTWxSdi9HTTdrRHVkRnFiTWczWUZ3WGczUWJxdVZxTFp6RXpqVmtDZ2dFQkFQSktaYkNXCllmTGVqa1MvZmtSeVYzVkliNTRtS3dRSG9NV3ViODh0UGdHdVh6anNKeWQ1UVRRNThQcFVqWHJMSG1uOGxTMisKdmlFOEdKeWxLd04xeU1sWnc0MCtrWmhwSFVwQ1d4LzJaS2pBcXZxQTlPT0tvMmZ2NkhkL3dPQW5VNEN0aW9DMQpwcmk3bEtGWVhvUDhEdFFWd0hZdkl6Q1JxRG5oYzRtd0pEcXpUQzl4ZHVJK3N2eHpsNHhIODJmeDBqclBpRlkrCi93T2RYanlmSVBqeWhIQzRqUFRXYmFpcndYUzlkQmpTbDEyOGFJUlQ1ODAveVhFL1NZQXVnZzA1akt0ZzV6UUEKU28xM01UZXpYUkhYZE8wZGkzdEVNSEdSRUVrRnBlVm5uUFF2Q0NlZEswRFYzNmlOd2lXYzhwd2RmTE1WbmVUdApES3daZWRDeCtvLzdldjBDZ2dFQkFPdTQ4REdFSkpKekh4VlI1bVkxSzJBbFp5WXRwVE9XZWhLMXpYNzRKdk0zCll4TjRuZCtaeDVuOXVTUG1tS3pxRjNUVSs0NFJWdGRKSzZlam9GRThkTURUTldhU0xXL1pEbU4xblQwbmp2T24KSVdKbjU5eW5PQ2hXV0taZ1haLzlVcUdSN1B0Nk94U2trZXg5Yy9mWUJzTVgveHVzZFhRaWdlb2dsMGlPWVZGVwpnWElpaUxSTEhwSEpzSy91TnhJaXpqMGhUWVluN3VEN1BSRU53RlJjQ1lmOEoxZVVGYmQ2RHVDVldlUUNLV2dmCk5kMnRTV29pMFZ5bGo0dVVYOEl3MHRqTE5NRDVDUkVKRWs0R1N2NEVEU212VWR2MUxpQktKQ0wybEVjZ29QZUMKb09EMmlDYzVLcWdubVFyYVJpbEZGazhSVlhBOVBXWkdZM0MwYjZUVm1tY0NnZ0VBTlpPMkFPS0FMbENBYlR0YgpGSStrUDA4UlA0dDVINThBTWpac2l3ZWFHbzBRaVduUERxK0ZkNk1JWXBLbjVtdGNBbHZVTVJWb3ZiaW9TSnROCmM2cHNCL3BOZjhKQ044Mm1xSEViN1dseXdNNDZBTUxiWkNXWUZMZThWQkJ2K2lFNEdkQkdQRWZ1NGhLNHZ5VG4KWVpBdlJ6NjRIR280QWRsenRiamc3NlYvbld0Z2dXMDV1TFhjcG01NUtKQVFodisyV1VMakJ3OVBIT0dEb1N3ZgpBbTIrVTU2N3JMaHQ3MHByc1FEajEwbGFKMlF1U0hTMVlYR2xmZUZjdzNlRlVwOVROK0pwdmRvQ29sMmxDSWdsCklIamdaajZPUldmQ3Zwb3hXN1JnQnVadWtxQ0QwUjYwSGRZdGF2eE4zanRpZXBzYXBBODNweE8wSmFwTWdaV1oKcnBVUmtRS0NBUUJPY0V2OUxpdTlUL0dYOXBqa2llelZJWjBoWnk4QjY2RFRlUXZZcEZyUnRDeVQzaDhxdU5GaQp2THRPNXYwSERSNmhFZjVqV0FHOXdldDA3VTM3dWxKZmwraTlLUWRWb0xUWkE5bys3MXJ5V1RzU3MrREQzQ0VqCnl4ZlV4VnhpVUxtZWFpQ2h6aHE2MDhoN0dZUHRoVVU2eGxGdHRBV2hqNW9MZnF6WXlBZzZPTDc2YStOeG0wMmcKMWF5bDNtOFU2ZUFYRjIza3BvVW0rSE5wcVZuR3VKbXpWb1VBNzVZS1orTnJlRWRoU0JiZlB3TjlzSnd0WlVpbAp1N0g0a0hjTTk1SXg4ZXlzQ2pLcUtJcWV6QmxJVGJEVG5qTnZMamNiSjVDKzBhNmx2SVhUMXZRUjUvZUdsYzlNCkJXRTM2MHBOa1YvTEQ4bU9mOUplcGkyUTQzb0RMOUVoQW9JQkFRRFRXSW1meTBLOWdHekEyclB5MTY5bVdZUUsKT2xjbkQzK2hRcTZ4NTFabjFlL3RleEZlVmxoSG40cnJuUmRDRk9BcDQ3dUZrSjJtNzJHQ1ZENzRFd1F1Y0s5eQpBRDVqb3JxZ1ZIcUNLWmRrSGpiMlY2ME16bTZnM3J0TDlXSlhGVkx2TkJiL1FHQjJ2Z0hWT08wenFpcUdaajRlCkV4N2wybS8vNVNFNERMdG43MEo5Q2dHMUh0WENTOGRXckdQTDFwekRuazhWWHRub1h6YjBMQ2hMVUZFZ1pSbWgKY1Y2QUZIRUsySDh3Qkh2aU55ZWhzUlFpRGtsMkFpV09jSk52a3pXNjhjazJuSmpSV3lQWUsxSkwzTkNLcEIzUQpPb2hyUDBmSGNXQVhNVzk3d0ZYWmhSZm5RZkR4eElPbGozTWNZVDBBbGFuWGQwRjROR2MyTnZtcGh4MDQKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  CLAIR_DB_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secret: "a3l1UWJCWEJ6c3J1OUlTWQ=="
---
# Source: harbor/templates/notary/notary-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary
type: Opaque
data:
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBekNDQWV1Z0F3SUJBZ0lSQUlXRXgzaWdIZWtYY2Q5ZFExcDBuM2d3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNREEwTWpJeE5qQTBORGxhRncweQpNVEEwTWpJeE5qQTBORGxhTUJzeEdUQVhCZ05WQkFNVEVHaGhjbUp2Y2kxdWIzUmhjbmt0WTJFd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEUHZXcXBrdWZteFg5VjBvM0hRQWxja2YxWnhkK1oKcG5uTXh1RHRESXIzNXVzL0lTeDk4cU84aVRrU1V1aFpkT2ZlZ05IOTJ2M0Q0WHJYS0s1c202a1VMQmxmcWovOQpCby84Q0pOaXNnTTRrU1RGVXdaaDlqbnNCay9vd1FSbndNNWtHeG9GS09Sb2FHZkZHaHNNcC9nS0RkMVZCOCthClpRSWhUMEhQd3UxVEpQU0lWSlU3WnEzMFArOXpxMWo2K1c5a05TbW10NkxkMDh4MnhkM2ZjRlhoeWhjSDVrbHYKOHpUVUNXdnVMS1BSSW9jQ01VMlNlckxMYkhwSm1qckhYaVFsRld6TGRUQmFYb3pDRkhpYWdzT0Z0bXhYSnAwcAo4RDJ3Q0pha2x3ZiszWnhzdlp5YitkbVMwOThmUzNpalFkLzY4TXl1Nkx0anZpVlZyZ3AxSWZMREFnTUJBQUdqClFqQkFNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQVJ1bU5CRHdvUEUvWQpzT0gxTXI2ZFhFNCtBU3B3Y0I5MTlVaVRNYU4zU01WMlUxUTNXcTR2QVFPcWY5SDhmQitpNzBzZHc4REFmenZkClNqa05lYythbXdieHYva1VEdzhlUlA5amRmaitMN1M1NUVIL2hRaDYxUlVGR3phSnhQN1V1UDJ5eXhkZi9nQ0cKUGJlckNNdEtSVFJCcFN5dGlQQTlxNHl0Wk5XWTNObUtBN2c1dTRjZWdYWExLdy9SWG1LUG1ORDJiQUZnYzdKWgpPalJQMHNpemtoUEFSOHhEalRZeXQzWVhhTmZwa0JZRlhWQll5WGdZUENTMzlWaERlUzkrRzQvb2tWZ0w1dzhTClowQy9ORVdIdkltcmVKRTFMYVM1bXhsb2FnZzZTTmY3dHE2dUNlWE8wYStUYzNSUmdrcy8zSWg2UGYzOGRKdEgKTmNKbFp4MkMzdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDekNDQWZPZ0F3SUJBZ0lSQVBPTExsdS9LQktCUlFoOWp3YzN0M0F3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNREEwTWpJeE5qQTBOVEJhRncweQpNVEEwTWpJeE5qQTBOVEJhTUNZeEpEQWlCZ05WQkFNVEcyaGhjbUp2Y2kxb1lYSmliM0l0Ym05MFlYSjVMWE5wCloyNWxjakNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMdUN6dGhzMXVoaXFvT1gKSG9SVUR3TGwwaHYySkhLNEdNU1hPWmt2Q2creE0rZnhsUzlSa0FjT2lML3ZLajNnRWpHRU15VzRUdksyUXFaTwp0M2Y2U1BwcVJvOHpiWXhwSU8rUkl1RmE4dG5xMmZjZklkWGgvLy9kOXhYSlRqTnp0SlUwNEIwSDdqZk1GSFBPClRtSWF2T0dCR2VOcUY3ZkhTSmU1alQwbElSbUtIN1BCcmFJY3NLUGxvY1hOQ1hNMERQa1AwYWhyMGpISVZRRnoKR1V1RVdDT1MzM0ZhWFVqazlKZW1XejUwRFdSUXRiUzAzR0hEVjByRmhIMVRKQU1QNDl4UHhSRWJ5RC9Vc1djLwplUXVBM0ExOVBNcFVycGJYK2RhRGhXV21hcTRUNHpOVmdzeEdabU9ZSXlGM2s1ZFNUeU1RaHN1TktMRXpXQytxCmg5am4wMmNDQXdFQUFhTS9NRDB3RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUYKQndNQkJnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDeApHeWZVdzlicGpCSnFaNlR0WitmR3EycmpDaVU1YlBXaEJkcS9CRUY5YW1mOU9mWko2OGFvVnNYSkUzU2VFcHRpCjREdGpsSnpnRTBtWGxqYURVS3U3WG95MnJjcU5CMVBzdmpEOXFoS3hxdUoyN1NYNmJ5cUtTUktSd214MTc0T1QKV081cUpwNFVRSmRpU3hOOGNPTS9wR2lCUzBzQnV4RTZ1YjZ3TXh2cHNmV3M3RWVXK3IxNTdDcWpTTFpHcTlVTwpRMGdaSXd2VCtWYXlwcktkc1BuUGVrV2RKU05ZNDhYaTV5SURQa2twdHY3V253cEdFYkQvbDBiVmE4Qm9MSHdLCityY3E2ckN0dFhISSt6TnMrZ0N0Rkp1MGR3eHZCZ3E2K3lIMS8vbXFZVUZLNXNyNHJpcWxabTUrcGJVeHllZ00KNWxIWXRLN3JQM0ljK2R6ay9jeDEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdTRMTzJHelc2R0txZzVjZWhGUVBBdVhTRy9Za2NyZ1l4SmM1bVM4S0Q3RXo1L0dWCkwxR1FCdzZJdis4cVBlQVNNWVF6SmJoTzhyWkNwazYzZC9wSSttcEdqek50akdrZzc1RWk0VnJ5MmVyWjl4OGgKMWVILy85MzNGY2xPTTNPMGxUVGdIUWZ1Tjh3VWM4NU9ZaHE4NFlFWjQyb1h0OGRJbDdtTlBTVWhHWW9mczhHdApvaHl3bytXaHhjMEpjelFNK1EvUnFHdlNNY2hWQVhNWlM0UllJNUxmY1ZwZFNPVDBsNlpiUG5RTlpGQzF0TFRjClljTlhTc1dFZlZNa0F3L2ozRS9GRVJ2SVA5U3haejk1QzREY0RYMDh5bFN1bHRmNTFvT0ZaYVpxcmhQak0xV0MKekVabVk1Z2pJWGVUbDFKUEl4Q0d5NDBvc1ROWUw2cUgyT2ZUWndJREFRQUJBb0lCQUR1cDJwRW95SlQyMkJTNAozLy94RXptejBOQU8yUGdidGQzUDFJYjJYYmd5aFRhWE93WHNhT3lsNWtOVUlWZkExV2ttREhSREdmUEdwSnh3ClRaYUNiL2dtR3I5eitMYUZ1UEloZHp6SGlLQm9SdVNINW1jODJ3MGFIb1d6SVF2a0ZDQ3B5Mm5SWFM0cDVKUVkKbi80OVRiNWZLdEtlcmw5T3JMMkNUL3VWdGR0KytQSzVZclR0UnVqTjNQNkd3TmlqaXUxSm5WZjlzQU41MHpvSQpaZkllVEpldngzWHBSY0hFcDFaT0xEQStVTUMrakhEZmM4N212UnQxRGtZVitRWnBJV3dFRHRiT1F2LzFlOExHCm5temwxaVIyWGxuTTgxY0tNWStZeHFuSW52cnNHTkFPaHhYNXV2TWZZcTl5ejIvREhDaWV6ZDNNTHVTZDZqd04Kb3JKOWU1RUNnWUVBellkMzd0ZXBGNEFMQkR0NHhhVVFyUHBWRXY0TTFSdHpYQ2JjNGN3L2VTSE5TelVpRzR4dQp6MTZrVVV1QzJYcllyQWJsZDI2YUxBa2RreDJGNm5EKzNPMStmbldhOGlYU1FseTZScjVxNVJtRHRrK3hSWnNDCk5sVzYzN2l3ZkY3bzRDUnFncGpUMitycHNuUytodkNYN2tuMWJJZXJvSGl3c0JSNzVYUFl2TDhDZ1lFQTZZNmgKVzFMUmNPdnB4RmRmZE5VWUdTbUgyZSt1NjVkaUwyWlNUYzh2ZWhVdEhkSWVOZGIvZ1Q5R1kwcW1wZTgvVks3Qgp1T3FKTzFZT3N5R09wcEZ3UWR1Y2ZUQ2w3UDZRMS9PK0xsM0hUQU02WHlHT2xtczVnSXpTb3hEdnIyTFBNQW1ECkhiVVFaRlNWcXkrbENrL042VHJqVUFkSXRQVmNXeWgwWGhBT0Mxa0NnWUVBeEQ1RlZkaTFxNnFtMmpPdTdZamUKazB1elQ1OGp3WmVrWHFqODN0eVcvcUkzMDBlNGVYVnRtTE5WVWdvM3RsQ0Y4anZqZmxZcy96NzA3ak9TV25mcAo0aWtpVHIwY1pYbVhlYVh3ZHZ2Nk5TWlhqUXdxeDd0cU1WZEtSN09oVUIrUFcvVnBmYWxQSVB6OGgxalJVeWNHCjZvL1R0djBUOHZWS1A5WlBOcGVXcXlFQ2dZRUF0K09sQjlKZE5SdUtJeHpuKzRVTVJFTit3d2tFSUZwQTVERWIKL0VkMGlockNPd2lFNEw4MnpQeVUzdmlYM1c1UjNzcjVuQzZOZmpwenVIWmphcUo0VUdJcEJDaVplOCt6RzFTKwpHS09kbHl1emVkTmlBT3pMaVh0WEhTem9pcDZ4b3BEYXV6a2tmdHBhUFQ1MkkzaFNGNkJWK1Z6QzBqZWRUK2k2Ck5wVk5lWUVDZ1lBd1VBREdIbVJEd0Qwck9EakplUFVXZGhnSUh0YzBCcFN2eUZjSW51S3lFeWtqbGdTc3VKNk4KaDNhYmJvd0R1WG5TNGxDbDVWdEhCbWR6OGVQanFYeHkvV2wrc3A3NzRSNjMwUGpLb3ZldHMrQm9YY0EwVmVycgordU12Ylg1VWhrSmtYTDJGU0xNVVYxZkRCWlUxL29BYnFyZm1id3RXUWkySGlxSWlzam5zM3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  server.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiaHR0cF9hZGRyIjogIjo0NDQzIgogIH0sCiAgInRydXN0X3NlcnZpY2UiOiB7CiAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgImhvc3RuYW1lIjogImhhcmJvci1oYXJib3Itbm90YXJ5LXNpZ25lciIsCiAgICAicG9ydCI6ICI3ODk5IiwKICAgICJ0bHNfY2FfZmlsZSI6ICIvZXRjL3NzbC9ub3RhcnkvY2EuY3J0IiwKICAgICJrZXlfYWxnb3JpdGhtIjogImVjZHNhIgogIH0sCiAgImxvZ2dpbmciOiB7CiAgICAibGV2ZWwiOiAiaW5mbyIKICB9LAogICJzdG9yYWdlIjogewogICAgImJhY2tlbmQiOiAicG9zdGdyZXMiLAogICAgImRiX3VybCI6ICJwb3N0Z3JlczovL3Bvc3RncmVzOmNoYW5nZWl0QGhhcmJvci1oYXJib3ItZGF0YWJhc2U6NTQzMi9ub3RhcnlzZXJ2ZXI/c3NsbW9kZT1kaXNhYmxlIgogIH0sCiAgImF1dGgiOiB7CiAgICAidHlwZSI6ICJ0b2tlbiIsCiAgICAib3B0aW9ucyI6IHsKICAgICAgInJlYWxtIjogImh0dHBzOi8vY29yZS5oYXJib3IuZG9tYWluL3NlcnZpY2UvdG9rZW4iLAogICAgICAic2VydmljZSI6ICJoYXJib3Itbm90YXJ5IiwKICAgICAgImlzc3VlciI6ICJoYXJib3ItdG9rZW4taXNzdWVyIiwKICAgICAgInJvb3RjZXJ0YnVuZGxlIjogIi9yb290LmNydCIKICAgIH0KICB9Cn0=
  signer.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiZ3JwY19hZGRyIjogIjo3ODk5IiwKICAgICJ0bHNfY2VydF9maWxlIjogIi9ldGMvc3NsL25vdGFyeS90bHMuY3J0IiwKICAgICJ0bHNfa2V5X2ZpbGUiOiAiL2V0Yy9zc2wvbm90YXJ5L3Rscy5rZXkiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6Y2hhbmdlaXRAaGFyYm9yLWhhcmJvci1kYXRhYmFzZTo1NDMyL25vdGFyeXNpZ25lcj9zc2xtb2RlPWRpc2FibGUiLAogICAgImRlZmF1bHRfYWxpYXMiOiAiZGVmYXVsdGFsaWFzIgogIH0KfQ==
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "blMzeEw0a2pBakN2cEoxVw=="
  REGISTRY_REDIS_PASSWORD: ""
  REGISTRY_STORAGE_S3_ACCESSKEY: "YXdzYWNjZXNza2V5"
  REGISTRY_STORAGE_S3_SECRETKEY: "YXdzc2VjcmV0a2V5"
---
# Source: harbor/templates/chartmuseum/chartmuseum-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  PORT: "9999"
  CACHE: "redis"
  CACHE_REDIS_ADDR: "harbor-harbor-redis:6379"
  CACHE_REDIS_DB: "3"
  BASIC_AUTH_USER: "chart_controller"
  DEPTH: "1"
  DEBUG: "false"
  LOG_JSON: "true"
  DISABLE_METRICS: "false"
  DISABLE_API: "false"
  DISABLE_STATEFILES: "false"
  ALLOW_OVERWRITE: "true"
  #CHART_URL: https://core.harbor.domain/chartrepo
  AUTH_ANONYMOUS_GET: "false"
  TLS_CERT: ""
  TLS_KEY: ""
  CONTEXT_PATH: ""
  INDEX_LIMIT: "0"
  MAX_STORAGE_OBJECTS: "0"
  MAX_UPLOAD_SIZE: "20971520"
  CHART_POST_FORM_FIELD_NAME: "chart"
  PROV_POST_FORM_FIELD_NAME: "prov"
  STORAGE: "amazon"
  STORAGE_AMAZON_BUCKET: bucketname
  STORAGE_AMAZON_PREFIX: /s3/object/name/prefix
  STORAGE_AMAZON_REGION: us-west-1
  STORAGE_AMAZON_ENDPOINT: http://myobjects.local
  AWS_ACCESS_KEY_ID: awsaccesskey
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = dev
    enablegzip = true

    [dev]
    httpport = 8080
    EnableXSRF = true
    XSRFKey = BeK93Ru05Wj0HhjWzDnOc5ept3UQqSDYseuHPUuy
    XSRFExpire = 3600
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "harbor-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "50"
  POSTGRESQL_MAX_OPEN_CONNS: "100"
  EXT_ENDPOINT: "https://core.harbor.domain"
  CORE_URL: "http://harbor-harbor-core"
  JOBSERVICE_URL: "http://harbor-harbor-jobservice"
  REGISTRY_URL: "http://harbor-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://harbor-harbor-core/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://harbor-harbor-notary-server:4443"
  CFG_EXPIRATION: "5"
  ADMIRAL_URL: "NA"
  WITH_CLAIR: "true"
  CLAIR_DB_HOST: "harbor-harbor-database"
  CLAIR_DB_PORT: "5432"
  CLAIR_DB_USERNAME: "postgres"
  CLAIR_DB: "postgres"
  CLAIR_DB_SSLMODE: "disable"
  CLAIR_URL: "http://harbor-harbor-clair:6060"
  CLAIR_ADAPTER_URL: "http://harbor-harbor-clair:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "s3"
  WITH_CHARTMUSEUM: "true"
  CHART_REPOSITORY_URL: "http://harbor-harbor-chartmuseum"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  SYNC_REGISTRY: "false"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL: "harbor-harbor-redis:6379,100,"
  _REDIS_URL_REG: "redis://harbor-harbor-redis:6379/2"
  PORTAL_URL: "http://harbor-harbor-portal"
  REGISTRYCTL_URL: "http://harbor-harbor-registry:8080"
  CLAIR_HEALTH_CHECK_SERVER_URL: "http://harbor-harbor-clair:6061"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-harbor-core,harbor-harbor-jobservice,harbor-harbor-database,harbor-harbor-chartmuseum,harbor-harbor-clair,harbor-harbor-notary-server,harbor-harbor-notary-signer,harbor-harbor-registry,harbor-harbor-portal,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "harbor-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
---
# Source: harbor/templates/nginx/configmap-http.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-nginx
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;

    events {
      worker_connections 1024;
      use epoll;
      multi_accept on;
    }

    http {
      client_body_temp_path /tmp/client_body_temp;
      proxy_temp_path /tmp/proxy_temp;
      fastcgi_temp_path /tmp/fastcgi_temp;
      uwsgi_temp_path /tmp/uwsgi_temp;
      scgi_temp_path /tmp/scgi_temp;
      tcp_nodelay on;

      # this is necessary for us to be able to disable request buffering in all cases
      proxy_http_version 1.1;

      upstream core {
        server harbor-harbor-core;
      }

      upstream portal {
        server harbor-harbor-portal;
      }

      log_format timed_combined '$remote_addr - '
        '"$request" $status $body_bytes_sent '
        '"$http_referer" "$http_user_agent" '
        '$request_time $upstream_response_time $pipe';

      access_log /dev/stdout timed_combined;

      server {
        listen 8080;
        server_tokens off;
        # disable any limits to avoid HTTP 413 for large image uploads
        client_max_body_size 0;

        # Add extra headers
        add_header X-Frame-Options DENY;
        add_header Content-Security-Policy "frame-ancestors 'none'";

        location / {
          proxy_pass http://portal/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;
          
          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /api/ {
          proxy_pass http://core/api/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;
          
          proxy_buffering off;
          proxy_request_buffering off;
        }
        
        location /chartrepo/ {
          proxy_pass http://core/chartrepo/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /c/ {
          proxy_pass http://core/c/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;
          
          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /v1/ {
          return 404;
        }

        location /v2/ {
          proxy_pass http://core/v2/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /service/ {
          proxy_pass http://core/service/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;
          
          proxy_buffering off;
          proxy_request_buffering off;
        }
      
      location /service/notifications {
          return 404;
        }
      }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Helm
    release: harbor
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      s3:
        region: us-west-1
        bucket: bucketname
        regionendpoint: http://myobjects.local
        rootdirectory: /s3/object/name/prefix
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: true
    redis:
      addr: "harbor-harbor-redis:6379"
      db: 2
    http:
      relativeurls: true
      addr: :5000
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      token:
        issuer: harbor-token-issuer
        realm: "https://core.harbor.domain/service/token"
        rootcertbundle: /etc/registry/root.crt
        service: harbor-registry
    validation:
      disabled: true
    notifications:
      endpoints:
        - name: harbor
          disabled: false
          url: http://harbor-harbor-core/service/notifications
          timeout: 3000ms
          threshold: 5
          backoff: 1s
          ignoredmediatypes:
            - application/vnd.docker.image.rootfs.diff.tar.gzip
            - application/vnd.docker.image.rootfs.foreign.diff.tar.gzip
            - application/vnd.oci.image.layer.v1.tar
            - application/vnd.oci.image.layer.v1.tar+gzip
            - application/vnd.oci.image.layer.v1.tar+zstd
            - application/vnd.oci.image.layer.nondistributable.v1.tar
            - application/vnd.oci.image.layer.nondistributable.v1.tar+gzip
            - application/vnd.oci.image.layer.nondistributable.v1.tar+zstd
            - application/octet-stream
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 9999
  selector:
    release: harbor
    app: "harbor"
    component: chartmuseum
---
# Source: harbor/templates/clair/clair-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-clair"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: adapter
      port: 8080
  selector:
    release: harbor
    app: "harbor"
    component: clair
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: harbor
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 4443
  selector:
    release: harbor
    app: "harbor"
    component: notary-server
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-notary-signer
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 7899
  selector:
    release: harbor
    app: "harbor"
    component: notary-signer
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-portal"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-redis
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: harbor
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    release: harbor
    app: "harbor"
    component: registry
---
# Source: harbor/templates/chartmuseum/chartmuseum-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: chartmuseum
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: chartmuseum
      annotations:
        checksum/configmap: ccf4f9e244698433f60917763a8d0b1686dcac6bcc14797fa3534f275d616101
        checksum/secret: bd667d951eec788c6f6f88e6d68dcda514568b7741c0eacfd846d8cba21a5061
        checksum/secret-core: 2dc6dc6774a87544ff8c71b8e87869513006e911c443229e6a445b70d2e79a50
    spec:
      securityContext:
        fsGroup: 10000
      containers:
        - name: chartmuseum
          image: goharbor/chartmuseum-photon:v0.9.0-v1.10.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /health
              port: 9999
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 9999
            initialDelaySeconds: 1
            periodSeconds: 10
          envFrom:
            - configMapRef:
                name: "harbor-harbor-chartmuseum"
            - secretRef:
                name: "harbor-harbor-chartmuseum"
          env:
            - name: BASIC_AUTH_PASS
              valueFrom:
                secretKeyRef:
                  name: harbor-harbor-core
                  key: secret
          ports:
            - containerPort: 9999
          volumeMounts:
            - name: chartmuseum-data
              mountPath: /chart_storage
              subPath:
      volumes:
        - name: chartmuseum-data
          emptyDir: {}
---
# Source: harbor/templates/clair/clair-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-clair
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: clair
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: clair
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: clair
      annotations:
        checksum/secret: 5c8e51933dcb4e16bfb8e842c9f528ede24179fe85294fc47c61cb9f4908b097
    spec:
      securityContext:
        fsGroup: 10000
      containers:
        - name: clair
          image: goharbor/clair-photon:v2.1.1-v1.10.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /health
              port: 6061
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 6061
            initialDelaySeconds: 30
            periodSeconds: 10
          args: ["-log-level", "info"]
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "harbor-harbor-core,harbor-harbor-jobservice,harbor-harbor-database,harbor-harbor-chartmuseum,harbor-harbor-clair,harbor-harbor-notary-server,harbor-harbor-notary-signer,harbor-harbor-registry,harbor-harbor-portal,127.0.0.1,localhost,.local,.internal"
          ports:
            - containerPort: 6060
          volumeMounts:
            - name: config
              mountPath: /etc/clair/config.yaml
              subPath: config.yaml
        - name: adapter
          image: goharbor/clair-adapter-photon:v1.0.1-v1.10.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /probe/healthy
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /probe/ready
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          env:
            - name: SCANNER_CLAIR_URL
              # To avoid a pod cannot reach itself via service IP when the clusters disable hairpin
              value: "http://127.0.0.1:6060"
            - name: SCANNER_STORE_REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: harbor-harbor-clair
                  key: redis
            - name: SCANNER_CLAIR_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: harbor-harbor-clair
                  key: database
            - name: SCANNER_LOG_LEVEL
              value: "info"
          ports:
            - containerPort: 8080
      volumes:
        - name: config
          secret:
            secretName: "harbor-harbor-clair"
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: 5becf25b8a0363c4bd6d95a913537049e698df84e34558ec346715f75cf0001c
        checksum/secret: 46974a6ae48b9263182a9cb6034ed212af6a91416a7c5a1ae75ff4ad43defb05
        checksum/secret-jobservice: c7354424fdbc49553fd23ebb3f0e2043a4ba1be17cd1d9e03f7af6a159b79f5e
    spec:
      securityContext:
        fsGroup: 10000
      containers:
        - name: core
          image: goharbor/harbor-core:v1.10.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/ping
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/ping
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 10
          envFrom:
            - configMapRef:
                name: "harbor-harbor-core"
            - secretRef:
                name: "harbor-harbor-core"
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: harbor-harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: "harbor-harbor-jobservice"
                  key: secret
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: config
              mountPath: /etc/core/app.conf
              subPath: app.conf
            - name: secret-key
              mountPath: /etc/core/key
              subPath: key
            - name: token-service-private-key
              mountPath: /etc/core/private_key.pem
              subPath: tls.key
            - name: psc
              mountPath: /etc/core/token
      volumes:
        - name: config
          configMap:
            name: harbor-harbor-core
            items:
              - key: app.conf
                path: app.conf
        - name: secret-key
          secret:
            secretName: harbor-harbor-core
            items:
              - key: secretKey
                path: key
        - name: token-service-private-key
          secret:
            secretName: harbor-harbor-core
        - name: psc
          emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: 405c839d5ddc616d944c1a84bde65caf8374bb0b235dc5a2a159e37f86f4b394
        checksum/secret: 9e82fa250062ac512696676d750ab78a2c42aac0aa721722e9e39abcef48ef34
        checksum/secret-core: 6cf8c54135442996c09bf26d1c79098917803ca9eca553424ceb765b3f52df3a
    spec:
      securityContext:
        fsGroup: 10000
      containers:
        - name: jobservice
          image: goharbor/harbor-jobservice:v1.10.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/v1/stats
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/v1/stats
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 10
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: harbor-harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: "harbor-harbor-jobservice"
                  key: secret
            - name: CORE_URL
              value: "http://harbor-harbor-core"
            - name: REGISTRY_CONTROLLER_URL
              value: "http://harbor-harbor-registry:8080"
            - name: LOG_LEVEL
              value: debug
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "harbor-harbor-core,harbor-harbor-jobservice,harbor-harbor-database,harbor-harbor-chartmuseum,harbor-harbor-clair,harbor-harbor-notary-server,harbor-harbor-notary-signer,harbor-harbor-registry,harbor-harbor-portal,127.0.0.1,localhost,.local,.internal"
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: jobservice-config
              mountPath: /etc/jobservice/config.yml
              subPath: config.yml
            - name: job-logs
              mountPath: /var/log/jobs
              subPath:
      volumes:
        - name: jobservice-config
          configMap:
            name: "harbor-harbor-jobservice"
        - name: job-logs
          persistentVolumeClaim:
            claimName: harbor-harbor-jobservice
---
# Source: harbor/templates/nginx/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-nginx
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: nginx
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: nginx
      annotations:
        checksum/configmap: 99b73f636310eb2f14fbe302ee1add1dfd2961aef7df7d2a43cb3be62faee8f2
    spec:
      securityContext:
        fsGroup: 10000
      containers:
        - name: nginx
          image: "goharbor/nginx-photon:v1.10.1"
          imagePullPolicy: "IfNotPresent"
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 10
          ports:
            - containerPort: 8080
            - containerPort: 8443
            - containerPort: 4443
          volumeMounts:
            - name: config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: config
          configMap:
            name: harbor-harbor-nginx
---
# Source: harbor/templates/notary/notary-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: notary-server
      annotations:
        checksum/secret: c823c66f63d2fa076faea988d1942f4dd0ec978e497b24ec5e14c75e961d8de6
        checksum/secret-core: 5015b9e5c2f65d26abea5f037dd1dadd4159ce2a1b0e7cd6e316764338a02ce4
    spec:
      securityContext:
        fsGroup: 10000
      containers:
        - name: notary-server
          image: goharbor/notary-server-photon:v0.6.1-v1.10.1
          imagePullPolicy: IfNotPresent
          env:
            - name: MIGRATIONS_PATH
              value: migrations/server/postgresql
            - name: DB_URL
              value: postgres://postgres:changeit@harbor-harbor-database:5432/notaryserver?sslmode=disable
          volumeMounts:
            - name: config
              mountPath: /etc/notary/server-config.postgres.json
              subPath: server.json
            - name: token-service-certificate
              mountPath: /root.crt
              subPath: tls.crt
            - name: signer-certificate
              mountPath: /etc/ssl/notary/ca.crt
              subPath: ca.crt
      volumes:
        - name: config
          secret:
            secretName: "harbor-harbor-notary-server"
        - name: token-service-certificate
          secret:
            secretName: harbor-harbor-core
        - name: signer-certificate
          secret:
            secretName: harbor-harbor-notary-server
---
# Source: harbor/templates/notary/notary-signer.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-notary-signer
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: notary-signer
      annotations:
        checksum/secret: 34528db57fdb62d14b3dc64347f11f39a18707accaba7b1bfc5fbf8bdd3340ff
    spec:
      securityContext:
        fsGroup: 10000
      containers:
        - name: notary-signer
          image: goharbor/notary-signer-photon:v0.6.1-v1.10.1
          imagePullPolicy: IfNotPresent
          env:
            - name: MIGRATIONS_PATH
              value: migrations/signer/postgresql
            - name: DB_URL
              value: postgres://postgres:changeit@harbor-harbor-database:5432/notarysigner?sslmode=disable
            - name: NOTARY_SIGNER_DEFAULTALIAS
              value: defaultalias
          volumeMounts:
            - name: config
              mountPath: /etc/notary/signer-config.postgres.json
              subPath: signer.json
            - name: signer-certificate
              mountPath: /etc/ssl/notary/tls.crt
              subPath: tls.crt
            - name: signer-certificate
              mountPath: /etc/ssl/notary/tls.key
              subPath: tls.key
      volumes:
        - name: config
          secret:
            secretName: "harbor-harbor-notary-server"
        - name: signer-certificate
          secret:
            secretName: harbor-harbor-notary-server
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-portal"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: portal
      annotations:
    spec:
      containers:
        - name: portal
          image: goharbor/harbor-portal:v1.10.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 10
          ports:
            - containerPort: 8080
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: 46647ea9518908d170ad6289194d7f00a03803f254ef9dd62caf5c87339ef96e
        checksum/secret: b0bca5e65e68b48df13af3cd6e93ab61df6dc2af77e9d62e05c43bd9ad2a522f
        checksum/secret-jobservice: 73b8fc91583ea88e6e985dfad13e0636d3ed8b484ec6645513964367e99815c0
        checksum/secret-core: 939070467af5e7c89743dd8ace0bac715ee3c3b4cb48c6df31092e8df1e86169
    spec:
      securityContext:
        fsGroup: 10000
      containers:
        - name: registry
          image: goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 1
            periodSeconds: 10
          args: ["serve", "/etc/registry/config.yml"]
          envFrom:
            - secretRef:
                name: "harbor-harbor-registry"
          ports:
            - containerPort: 5000
            - containerPort: 5001
          volumeMounts:
            - name: registry-data
              mountPath: /storage
              subPath:
            - name: registry-root-certificate
              mountPath: /etc/registry/root.crt
              subPath: tls.crt
            - name: registry-config
              mountPath: /etc/registry/config.yml
              subPath: config.yml
        - name: registryctl
          image: goharbor/harbor-registryctl:v1.10.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/health
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 10
          args: ["serve", "/etc/registry/config.yml"]
          envFrom:
            - secretRef:
                name: "harbor-harbor-registry"
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: harbor-harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: harbor-harbor-jobservice
                  key: secret
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: registry-data
              mountPath: /storage
              subPath:
            - name: registry-config
              mountPath: /etc/registry/config.yml
              subPath: config.yml
            - name: registry-config
              mountPath: /etc/registryctl/config.yml
              subPath: ctl-config.yml
      volumes:
        - name: registry-root-certificate
          secret:
            secretName: harbor-harbor-core
        - name: registry-config
          configMap:
            name: "harbor-harbor-registry"
        - name: registry-data
          emptyDir: {}
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "harbor-harbor-database"
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 4ff26e469c2bc466552f28d545ad293be56c436790a6f26c8e0cf2497aaa08b2
    spec:
      initContainers:
        - name: "change-permission-of-directory"
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "chown -R 999:999 /var/lib/postgresql/data"]
          volumeMounts:
            - name: database-data
              mountPath: /var/lib/postgresql/data
              subPath:
        - name: "remove-lost-found"
          image: goharbor/harbor-db:v1.10.1
          imagePullPolicy: IfNotPresent
          command: ["rm", "-Rf", "/var/lib/postgresql/data/lost+found"]
          volumeMounts:
            - name: database-data
              mountPath: /var/lib/postgresql/data
              subPath:
      containers:
        - name: database
          image: goharbor/harbor-db:v1.10.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - /docker-healthcheck.sh
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - /docker-healthcheck.sh
            initialDelaySeconds: 1
            periodSeconds: 10
          envFrom:
            - secretRef:
                name: "harbor-harbor-database"
          volumeMounts:
            - name: database-data
              mountPath: /var/lib/postgresql/data
              subPath:
  volumeClaimTemplates:
    - metadata:
        name: "database-data"
        labels:
          heritage: Helm
          release: harbor
          chart: harbor
          app: "harbor"
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-harbor-redis
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: harbor-harbor-redis
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        fsGroup: 999
      containers:
        - name: redis
          image: goharbor/redis-photon:v1.10.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 1
            periodSeconds: 10
          volumeMounts:
            - name: data
              mountPath: /var/lib/redis
              subPath:
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          heritage: Helm
          release: harbor
          chart: harbor
          app: "harbor"
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "1Gi"
